import '../../styles/globals.scss';
import { NextIntlClientProvider } from 'next-intl';
import { getMessages, setRequestLocale } from 'next-intl/server';
import React from 'react';
import { routing } from '@/i18n/routing';
import { notFound } from 'next/navigation';
import { ILocale } from '@/i18n/request';
import localFont from 'next/font/local';
import { Metadata } from 'next';

const geistSans = localFont({
  src: '../../public/GeistVF.woff',
  variable: '--font-geist-sans',
  weight: '100 900',
});
const geistMono = localFont({
  src: '../../public/GeistMonoVF.woff',
  variable: '--font-geist-mono',
  weight: '100 900',
});

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default async function RootLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: Promise<{ locale: ILocale }>;
}) {
  const { locale } = await params;

  /** 
   Ensure that the requested url start with valid locale  '/ar/**' | '/en/**'
   otherwise redirect 404 page 
   
   */

  if (!routing.locales.includes(locale as ILocale)) {
    notFound();
  }

  // Enable static rendering
  setRequestLocale(locale);

  /**
  fetch messages from messages files ex: /messages/ar.json etc...
  path is defined at /i18n/request.ts 
  */
  const messages = await getMessages();

  return (
    <html lang={locale} dir={['ar'].includes(locale) ? 'rtl' : 'ltr'}>
      <body
        style={{
          fontFamily: `${geistSans.style.fontFamily}, ${geistMono.style.fontFamily}`,        }}
      >
        <div
          style={{
            width: '100vw',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            height: '100vh',
          }}

          
        >
          <NextIntlClientProvider messages={messages}>{children}</NextIntlClientProvider>
        </div>
      </body>
    </html>
  );
}

export function generateStaticParams() {
  return routing.locales.map((locale) => ({ locale }));
}
